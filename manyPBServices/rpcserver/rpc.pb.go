// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package rpcserver

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "code.google.com/p/protorpc"

import "testPBServicePart/entity"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

func init() {
}

type ArithServiceDivide interface {
	Divide(in *entity.ArithRequest, out *entity.ArithResponse) error
}

// AcceptArithServiceDivideClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptArithServiceDivideClient(lis net.Listener, x ArithServiceDivide) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithServiceDivide", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterArithServiceDivide publish the given ArithServiceDivide implementation on the server.
func RegisterArithServiceDivide(srv *rpc.Server, x ArithServiceDivide) error {
	if err := srv.RegisterName("ArithServiceDivide", x); err != nil {
		return err
	}
	return nil
}

// NewArithServiceDivideServer returns a new ArithServiceDivide Server.
func NewArithServiceDivideServer(x ArithServiceDivide) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithServiceDivide", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeArithServiceDivide listen announces on the local network address laddr
// and serves the given ArithServiceDivide implementation.
func ListenAndServeArithServiceDivide(network, addr string, x ArithServiceDivide) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithServiceDivide", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type ArithServiceDivideClient struct {
	*rpc.Client
}

// NewArithServiceDivideClient returns a ArithServiceDivide rpc.Client and stub to handle
// requests to the set of ArithServiceDivide at the other end of the connection.
func NewArithServiceDivideClient(conn io.ReadWriteCloser) (*ArithServiceDivideClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &ArithServiceDivideClient{c}, c
}

func (c *ArithServiceDivideClient) Divide(in *entity.ArithRequest, out *entity.ArithResponse) error {
	return c.Call("ArithServiceDivide.Divide", in, out)
}

// DialArithServiceDivide connects to an ArithServiceDivide at the specified network address.
func DialArithServiceDivide(network, addr string) (*ArithServiceDivideClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &ArithServiceDivideClient{c}, c, nil
}

// DialArithServiceDivideTimeout connects to an ArithServiceDivide at the specified network address.
func DialArithServiceDivideTimeout(network, addr string,
	timeout time.Duration) (*ArithServiceDivideClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &ArithServiceDivideClient{c}, c, nil
}

type ArithServiceMultiply interface {
	Multiply(in *entity.ArithRequest, out *entity.ArithResponse) error
}

// AcceptArithServiceMultiplyClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptArithServiceMultiplyClient(lis net.Listener, x ArithServiceMultiply) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithServiceMultiply", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterArithServiceMultiply publish the given ArithServiceMultiply implementation on the server.
func RegisterArithServiceMultiply(srv *rpc.Server, x ArithServiceMultiply) error {
	if err := srv.RegisterName("ArithServiceMultiply", x); err != nil {
		return err
	}
	return nil
}

// NewArithServiceMultiplyServer returns a new ArithServiceMultiply Server.
func NewArithServiceMultiplyServer(x ArithServiceMultiply) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithServiceMultiply", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeArithServiceMultiply listen announces on the local network address laddr
// and serves the given ArithServiceMultiply implementation.
func ListenAndServeArithServiceMultiply(network, addr string, x ArithServiceMultiply) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("ArithServiceMultiply", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type ArithServiceMultiplyClient struct {
	*rpc.Client
}

// NewArithServiceMultiplyClient returns a ArithServiceMultiply rpc.Client and stub to handle
// requests to the set of ArithServiceMultiply at the other end of the connection.
func NewArithServiceMultiplyClient(conn io.ReadWriteCloser) (*ArithServiceMultiplyClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &ArithServiceMultiplyClient{c}, c
}

func (c *ArithServiceMultiplyClient) Multiply(in *entity.ArithRequest, out *entity.ArithResponse) error {
	return c.Call("ArithServiceMultiply.Multiply", in, out)
}

// DialArithServiceMultiply connects to an ArithServiceMultiply at the specified network address.
func DialArithServiceMultiply(network, addr string) (*ArithServiceMultiplyClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &ArithServiceMultiplyClient{c}, c, nil
}

// DialArithServiceMultiplyTimeout connects to an ArithServiceMultiply at the specified network address.
func DialArithServiceMultiplyTimeout(network, addr string,
	timeout time.Duration) (*ArithServiceMultiplyClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &ArithServiceMultiplyClient{c}, c, nil
}
